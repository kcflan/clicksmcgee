{"version":3,"sources":["components/ClickCard/ClickCard.js","components/GameCard/GameCard.js","components/Header/Header.js","App.js","serviceWorker.js","index.js"],"names":["ClickCard","props","react_default","a","createElement","className","lose","onClick","clickedOrNot","id","alt","name","src","image","GameCard","children","Header","message","counter","high_score","App","state","mcgees","count","highScore","shuffleMcGees","_this","sort","Math","random","_this$state","i","console","log","clicked","concat","toUpperCase","resetGame","setState","_this2","this","Header_Header","GameCard_GameCard","map","mcgee","ClickCard_ClickCard","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e9771ad9.chunk.js","sourcesContent":["import React from 'react';\nimport './style.css';\n\nfunction ClickCard(props) {\n  return (\n    <div className={props.lose ? 'card' : 'card'}>\n      <div className=\"img-container\" onClick={() => props.clickedOrNot(props.id)}>\n        <img alt={props.name} src={props.image} />\n      </div>\n      <div className=\"content\">\n        <ul>\n          <li>\n            <strong>Name:</strong> {props.name}\n          </li>\n        </ul>\n      </div>\n    </div>\n  );\n}\n\nexport default ClickCard;\n","import React from 'react';\nimport './style.css';\n\nfunction GameCard(props) {\n  return <div className=\"wrapper\">{props.children}</div>;\n}\n\nexport default GameCard;\n","import React from 'react';\nimport './style.css';\n\nfunction Header(props) {\n  return (\n    <nav>\n      <ul>\n        <li>\n          <strong>Clicks McGee - Memory Game</strong>\n        </li>\n        <li className={props.lose !== null ? (props.lose ? 'message text-danger' : 'message') : 'message'}>\n          <span>{props.message}</span>\n        </li>\n        <li>\n          Score: <span>{props.counter}</span> | Top Score: <span>{props.high_score}</span>\n        </li>\n      </ul>\n    </nav>\n  );\n}\n\nexport default Header;\n","import React, { Component } from 'react';\nimport McGeeCard from './components/ClickCard/ClickCard';\nimport GameCard from './components/GameCard/GameCard';\nimport NavBar from './components/Header/Header';\nimport mcgees from './mcgees.json';\nimport './App.css';\n\nclass App extends Component {\n  state = {\n    mcgees,\n    count: 0,\n    message: \"Don't click the same image twice! Been Warned.\",\n    highScore: 0,\n    lose: false\n  };\n\n  //shuffle uses a sort function that uses math.random which returns either\n  // a positive number or a negative.  Swaps array locations if negative and\n  // does nothing if positive.\n  shuffleMcGees = () => {\n    return this.state.mcgees.sort(() => Math.random() - 0.5);\n  };\n\n  clickedOrNot = id => {\n    let { mcgees, count, message, highScore, lose } = this.state;\n\n    mcgees = this.shuffleMcGees();\n    console.log(id);\n    for (let i in mcgees) {\n      if (mcgees[i].id === id) {\n        if (mcgees[i].clicked) {\n          count = 0;\n          message = `Nope! You already clicked ${mcgees[i].name.toUpperCase()}!`;\n          lose = true;\n          this.resetGame();\n        } else {\n          count++;\n          message = 'Keep going!';\n          mcgees[i].clicked = true;\n          lose = false;\n          if (count > highScore) {\n            highScore = count;\n            message = 'New High Score!';\n          }\n        }\n      }\n    }\n\n    this.setState({\n      mcgees,\n      count,\n      message,\n      highScore,\n      lose\n    });\n  };\n\n  resetGame = () => {\n    for (let i in mcgees) {\n      mcgees[i].clicked = false;\n    }\n    this.setState({ mcgees, count: 0 });\n  };\n\n  render() {\n    return (\n      <div>\n        <NavBar lose={this.state.lose} counter={this.state.count} high_score={this.state.highScore} message={this.state.message} />\n        <GameCard>\n          {this.state.mcgees.map(mcgee => (\n            <McGeeCard\n              id={mcgee.id}\n              key={mcgee.id}\n              mcgees={this.state.mcgees}\n              name={mcgee.name}\n              image={mcgee.image}\n              clicked={mcgee.clicked}\n              clickedOrNot={this.clickedOrNot}\n              lose={this.state.lose}\n            />\n          ))}\n        </GameCard>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}